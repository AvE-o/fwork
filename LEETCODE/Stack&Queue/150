#150 Evaluate Reverse Polish Notation

//stack!
Class Solution {
    public int evalRPN(String[] tokens) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        Char ch;
        int result;
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i] == 数字) {
                deque.push(token[i]);
            } else if (token[i] == 符号) {
                int temp1 = (int)deque.poll;
                int temp2 = (int)deque.poll;
                int temp3 = temp1 符号 temp2;
                deque.push(temp3);
            }
        }
    }
}

//result
class Solution {
    public int evalRPN(String[] tokens) {
        Deque<Integer> stack = new LinkedList<>();
        for (String s : tokens) {
            if ("+".equals(s)) {        // leetcode 内置jdk的问题，不能使用==判断字符串是否相等
                stack.push(stack.pop() + stack.pop());      // 注意 - 和/ 需要特殊处理
            } else if ("-".equals(s)) {
                stack.push(-stack.pop() + stack.pop());
            } else if ("*".equals(s)) {
                stack.push(stack.pop() * stack.pop());
            } else if ("/".equals(s)) {
                int temp1 = stack.pop();
                int temp2 = stack.pop();
                stack.push(temp2 / temp1);
            } else {
                stack.push(Integer.valueOf(s));
            }
        }
        return stack.pop();
    }
}
}