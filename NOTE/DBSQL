#数据库复习

##基础知识总结
#
关系(Relation): 一个关系通常是一张表
元组(Tuple): 表中的每行(Row)
码(Key): 码就是能唯一标识实体的属性，对应表中的列
候选码(Candidate key)：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，
同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码
主码(Primary Key): 主码也叫主键。主码是从候选码中选出来的。 一个实体集中只能有一个主码，但可以有多个候选码
外码(Foreign key): 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码
主属性(Prime attribute)：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，
所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性
非主属性(Nonprime attribute): 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，
那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性

#ER 图 [Entity Relationship Diagram]
实体(Entity): [Row]通常是现实世界的业务对象，当然使用一些逻辑对象也可以。比如对于一个校园管理系统，会涉及学生、教师、课程、班级等等实体。在 ER 图中，实体使用矩形框表示
属性(Attribute): 即某个实体拥有的属性，属性用来描述组成实体的要素，对于产品设计来说可以理解为字段。在 ER 图中，属性使用椭圆形表示
联系(Relation):即实体与实体之间的关系，在 ER 图中用菱形表示，这个关系不仅有业务关联关系，还能通过数字表示实体之间的数量对照关系。例如，一个班级会有多个学生就是一种实体间的联系

同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）。另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）

#数据库规范
1NF 属性不可再分
-no table column can have tables as values
-属性不可再分 无重复列(column)
-不能再被分割，也就是这个字段只能是一个值，不能再分为多个其他的字段了。1NF 是所有关系型数据库的最基本要求 ，
也就是说关系型数据库中创建的表一定满足第一范式

2NF 1NF 的基础之上，消除了非主属性对于码的部分函数依赖
-is a fundamental concept of database normalization that helps
remove partial dependencies in your relational database

3NF
-It deals with transitive dependencies and improves data integrity through effective information organization

#主键和外键区别是什么
主键(Primary Key)：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键
外键(Foreign Key): 外键用来和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键[一般会被ban掉]

#储存过程(Stored Procedure)
-不咋用
我们可以把存储过程看成是一些 SQL 语句的集合，中间加了点逻辑控制语句。存储过程在业务比较复杂的时候是非常实用的，比如很多时候我们完成一个操作可能需要写一大串 SQL 语句，这时候我们就可以写有一个存储过程，这样也方便了我们下一次的调用。
存储过程一旦调试完成通过后就能稳定运行，另外，使用存储过程比单纯 SQL 语句执行要快，因为存储过程是预编译过的

drop, delete and truncate
-drop(丢弃数据): drop table 表名 ，直接将表都删除掉，在删除表的时候使用[Remove table]
-truncate (清空数据) : truncate table 表名 ，只删除表中的数据，
再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用[Empty table]
delete（删除数据） : delete from 表名 where 列名=值，删除某一行的数据，如果不加 where 子句和truncate table 表名作用类似

注:truncate 和 drop 属于 DDL(数据定义语言)语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。
而 delete 语句是 DML (数据库操作语言)语句，这个操作会放到 rollback segment 中，事务提交之后才生效

DML 语句和 DDL 语句区别
-DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作
DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，
更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用

数据库的设计:
需求分析 : 分析用户的需求，包括数据、功能和性能需求
概念结构设计 : 主要采用 E-R 模型进行设计，包括画 E-R 图
逻辑结构设计 : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换
物理结构设计 : 主要是为所设计的数据库选择合适的存储结构和存取路径
数据库实施 : 包括编程、测试和试运行
数据库的运行和维护 : 系统的运行与数据库的日常维护

##字符集(coded character set)详解
注: MySQL
SHOW CHARSET 来查看


##SQL语法基础知识总结

#基本概念
-数据库术语
数据库（database） - 保存有组织的数据的容器（通常是一个文件或一组文件）。
数据表（table） - 某种特定类型数据的结构化清单。
模式（schema） - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。
列（column） - 表中的一个字段。所有表都是由一个或多个列组成的。
行（row） - 表中的一个记录。
主键（primary key） - 一列（或一组列），其值能够唯一标识表中每一行。

-SQL语法

子句 - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）
表达式(expression) - 可以产生任何标量值，或由列和行的数据库表
谓词 - 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。
查询(select) - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。
语句 - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。

SQL 语法要点
SQL 语句不区分大小写，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。
例如：SELECT 与 select、Select 是相同的
多条 SQL 语句必须以分号（;）分隔
处理 SQL 语句时，所有空格都被忽略

//一行
UPDATE user SET username = 'robot', password = 'robot' WHERE username = 'root';
//多行
UPDATE user
SET username='robot', password='robot'
WHERE username = 'root';

SQL 支持三种注释
## 注释1
-- 注释2
/* 注释3 */

#SQL 分类
数据定义语言(DDL)
-数据定义语言（Data Definition Language，DDL）是 SQL 语言集中负责数据结构定义与数据库对象定义的语言。
-DDL 的主要功能是定义数据库对象。
-DDL 的核心指令是 CREATE、ALTER、DROP

数据操纵语言(DML)
-数据操纵语言（Data Manipulation Language, DML）是用于数据库操作，对数据库其中的对象和数据运行访问工作的编程语句。
-DML 的主要功能是 访问数据，因此其语法都是以读写数据库为主。
-DML 的核心指令是 INSERT、UPDATE、DELETE、SELECT。这四个指令合称 CRUD(Create, Read, Update, Delete)，即增删改查

事务控制语言(TCL)
-事务控制语言(Transaction Control Language, TCL) 用于管理数据库中的事务。这些用于管理由 DML 语句所做的更改。它还允许将语句分组为逻辑事务。
-TCL 的核心指令是 COMMIT、ROLLBACK

数据控制语言(DCL)
-DCL 以控制用户的访问权限为主，因此其指令作法并不复杂，可利用 DCL 控制的权限有：CONNECT、SELECT、INSERT、UPDATE、DELETE、EXECUTE、USAGE、REFERENCES。


增删改查(DML) CRUD

INSERT INTO
ex.

插入数据
//insert complete row
INSERT INTO user
VALUES(10, 'root', 'root'),
(12, 'root1', 'root2');

//insert some info
INSERT INTO user(username)
VALUES('root');

INSERT INTO user(username)
SELECT name
FROM account;

更新数据
UPDATE
ex.
UPDATE user
SET username = 'root2', password = 'root'
WHERE username = 'root';

删除数据
DELETE 语句用于删除表中的记录
TRUNCATE TABLE 可以清空表，也就是删除所有行

DELETE FROM user
WHERE username = 'root';

//empty the whole table
TRUNCATE TABLE user;

查询数据
SELECT
DISTINCT 用于返回唯一不同的值。它作用于所有列，也就是说所有列的值都相同才算相同
LIMIT 限制返回行数
ASC 升序(默认)