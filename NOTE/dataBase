
DDL: create, alter, drop
DML: insert, update, delete, select
TCL: commit, rollback

Ex:
#插入
INSERT INTO user
VALUES (10, 'root', 'root', 'xxx@gmail.com');

INSERT INTO user
VALUES (10, 'root', 'root', 'xxxx@163.com'), (12, 'user1', 'user1', 'xxxx@163.com'), (18, 'user2', 'user2', 'xxxx@163.com');

INSERT INTO user(username, password, email)
VALUES ('admin', 'admin', 'xxxx@163.com');
插入查询出来的数据
INSERT INTO user(username)
SELECT name
FROM account;

#更新数据
UPDATE user
SET username='robot', password='robot'
WHERE username = 'root';

#删除数据
DELETE FROM user
WHERE username = 'robot';

TRUNCATE TABLE user;

#查询数据
SELECT * FROM mytable LIMIT 5;

#排序

SELECT * FROM products
ORDER BY prod_price DESC, prod_name ASC;

#随便写写
SELECT DISTINCT pro_id
FROM OrderItems

SELECT cust_id, cust_name
FROM Customers

SELECT cust_name
FROM Customers
ORDER BY cust_name DESC

SELECT cust_id, order_num
FROM Orders
ORDER BY cust_id, order_date DESC

SELECT quantity, item_price
FROM OrderItems
ORDER BY quantity DESC, item_price DESC

SELECT vend_name
FROM Vendors
ORDER BY vend_name DESC

SELECT prod_id, prod_name
FROM Products
WHERE prod_price = 9.49

SELECT prod_id, prod_name
FROM Products
WHERE prod_price >= 9

SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 3 AND 6
ORDER BY prod_price

SELECT DISTINCT order_num
FROM ORDERItems
GROUP BY order_num
WHERE SUM(quantity) >= 100

SELECT vend_name
FROM Vendors
WHERE vend_country = "USA" AND vend_state = "CA"

SELECT order_num, prod_id, quantity
FROM OrderItems
WHERE prod_id = "BR01" or prod_id = "BR02" or prod_id = "BR03" AND quantity >= 100
#WHERE prod_id IN ('BR01', 'BR02', 'BR03') AND quantity >= 100

SELECT prod_name, prod_price
FROM Products
#WHERE prod_price >= 3 and prod_price <= 6
WHERE prod_price BETWEEN 3 AND 6
ORDER BY prod_price

SELECT vend_name
FROM Vendors
WHERE vend_country = 'USA' AND vend_state = 'CA'
ORDER BY vend_name

SELECT prod_name, prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%'

SELECT prod_name, prod_desc
FROM Products
WHERE prod_desc NOT LIKE '%toy%'
ORDER BY prod_name

SELECT prod_name, prod_desc
FROM Products
WHERE prod_desc LIKE '%toy' AND prod_desc LIKE '%carrots%'

SELECT prod_name, prod_desc
FROM Products
WHERE prod_desc LIKE '%toy%carrots%'

SELECT vend_id, vend_name AS vname, vend_address AS vaddress, vend_city AS vcity
FROM Vendors
ORDER BY vname

SELECT prod_id, prod_price, prod_price * 0.9 AS sale_price
FROM Products

SELECT cust_id, cust_name, UPPER(CONCAT(SUBSTRING(cust_contact, 1, 2), SUBSTRING(cust_city, 1, 3))) AS user_login
FROM Customers

SELECT order_num, order_date
FROM Orders
WHERE month(order_date) = '01' AND year(order_date) = '2020'
ORDER BY order_date

SELECT SUM(quantity) as item_quantity
FROM OrderItems

SELECT SUM(quantity) as item_quantity
FROM OrderItems
WHERE prod_id = 'BR01'

SELECT Max(prod_price) as max_price
FROM Products
WHERE prod_price <= '10'

SELECT COUNT(order_num) AS order_lines
FROM OrderItems
GROUP BY order_num
ORDER BY order_lines

SELECT vend_id, MIN(prod_price) AS cheapest_item
FROM Products
GROUP BY vend_id
ORDER BY cheapest_item

SELECT order_num
FROM OrderItems
GROUP BY order_num
HAVING SUM(quantity) >= '100'
ORDER BY order_num

SELECT order_num, SUM(item_price * quantity) AS total_price
FROM OrderItems
GROUP BY order_num
HAVING  total_price >= 1000
ORDER BY order_num

SELECT order_num, COUNT(*) AS items
FROM OrderItems
GROUP BY order_num
HAVING items >= 3
ORDER BY items, order_num;

SELECT cust_id
FROM Orders
WHERE order_num IN (SELECT DISTINCT order_num
                    FROM OrderItems
                    WHERE item_price >= 10)

SELECT cust_id, order_date
FROM Orders
WHERE order_num IN (SELECT order_num
                  FROM OrderItems
                  WHERE prod_id = 'BR01')
ORDER BY order_date

SELECT b.cust_id, b.order_date
FROM OrderItems a, Orders b
WHERE a.order_num = b.order_num AND a.prod_id = 'BR01'
ORDER BY order_date

SELECT c.cust_email
FROM OrderItems a, Orders b, Customers c
WHERE a.order_num = b.order_num AND b.cust_id = c.cust_id AND a.prod_id = 'BR01'

SELECT b.cust_id, SUM(a.item_price * a.quantity) AS total_ordered
FROM OrderItems a, Orders b
WHERE a.order_num = b.order_num
GROUP BY cust_id
ORDER BY total_ordered DESC


从 Products 表中检索所有的产品名称以及对应的销售总数

